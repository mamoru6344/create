
var config = {
  wager  : { value: 100, type: 'balance',    label: '賭け金額' },
  payout : { value: 10,  type: 'multiplier', label: '払出倍率' },
  fincnt : { value: 100, type: 'multiplier', label: '制限回数' }
};

var loseCnt     = 0;
var roundCnt    = 0;
var currentBet  = 0;
var sumBet      = 0;
var _stackBet   = [0, 0];
var waitCnt     = 0;
var oneBitsCnt  = 211074;
var multiplier  = 1;
var culBet      = 0;
var _stackMultiplier = [0,0];


if (engine.gameState === "GAME_STARTING") {
  cocomoMethod();
}

engine.on('GAME_STARTING', onGameStarted);
engine.on('GAME_ENDED', onGameEnded);

function onGameStarted() {
   var confirmGame = engine.history.first();

   if (roundCnt == 1){
      waitCnt+=1;
   }

   if (confirmGame.bust <= 3.00 && waitCnt==0) {
      waitCnt+=1;
      roundCnt+=1;
      log('ゲーム回数：',roundCnt, ', ','前回BUSTが3以下なので、1回待機します。');
      engine.cancelQueuedBet();
   } else if (confirmGame.bust >= 10.00){
      roundCnt+=1;
      log('ゲーム回数：',roundCnt, ', ','前回BUSTが10以上で勝利したので、1回待機します。');
      engine.cancelQueuedBet();
   } else {
      cocomoMethod();
   }
}

function onGameEnded() {
   var lastGame = engine.history.first();
   if (!lastGame.wager) {
      return;
   }
   if (lastGame.cashedAt) {
      var betpayout = Math.round((Math.trunc(currentBet * multiplier / 100) * 100 * config.payout.value) / 100);
      var profit    = Math.round(((Math.trunc(currentBet * multiplier / 100) * 100 * config.payout.value) - sumBet) / 100);
      log('結果：WON ,利益：', profit, 'bits, 払い出し：', betpayout, 'bits, BUST[', lastGame.bust, ']');
      currentBet  = 0;
      sumBet      = 0;
      loseCnt     = 0;
      _stackBet   = [0, 0];
      _stackMultiplier = [0,0];
   } else {
      _stackBet[0] = _stackBet[1];
      _stackBet[1] = currentBet;
      _stackMultiplier[0] = multiplier;
      loseCnt += 1;
      log('結果：LOST, 損益：', _stackBet[1] / 100, 'bits ,LOST回数：', loseCnt,', BUST[', lastGame.bust, ']');
   }
   if (config.fincnt.value <= loseCnt) {
      log('負け回数が指定の上限に達しました。スクリプトを終了します');
      engine.removeListener('GAME_STARTING', onGameStarted);
      engine.removeListener('GAME_ENDED', onGameEnded);
   }
}

function cocomoMethod() {
   roundCnt += 1;
   multiplier = Math.round(((userInfo.balance/100) / oneBitsCnt) * 10) / 10;
   if ((currentBet * config.payout.value) - (sumBet + currentBet) > 0) {
      currentBet = currentBet;
   }else if (loseCnt < 1){
      currentBet = config.wager.value;
   }else {
      currentBet = currentBet + config.wager.value * Math.ceil(Math.abs((currentBet * config.payout.value) - (sumBet + currentBet)) / (config.wager.value * config.payout.value - config.wager.value));
   }
   sumBet = sumBet + currentBet;
   if(currentBet * config.payout.value - sumBet == 0){
      currentBet= currentBet + config.wager.value;
      sumBet = sumBet + config.wager.value;
   }

   culBet = currentBet;
   log('テスト：multiplier=',multiplier,',前回乗数=',_stackMultiplier[0]);
   if (multiplier >=  _stackMultiplier[0]) {
      currentBet = Math.trunc(currentBet * multiplier / 100) * 100;
   }
   sumBet = sumBet + (currentBet-culBet);

   log('テスト：currentBet=',currentBet/100,Number.isInteger(currentBet/100));
   engine.bet(currentBet, config.payout.value);
   log('ゲーム回数：',roundCnt, ', ', ' BET金額[現在,前々回,前回]：[', Math.round(currentBet / 100), ',',Math.round(_stackBet[0] / 100), ',', Math.round(_stackBet[1] / 100),  '], 合計支払：' , Math.round(sumBet / 100));
   currentBet = culBet;
}